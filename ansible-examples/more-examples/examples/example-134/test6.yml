- name: Test reachable hosts
  hosts: working_hosts
  gather_facts: false
  vars:
    connection_timeout: "10"
  tasks:
    - block:
        - wait_for_connection:
            timeout: "{{ connection_timeout }}"
      rescue:
        - debug:
            msg: "[ERR] Can not connect to {{ inventory_hostname }}"
        - set_fact:
            reachable: false
        - meta: clear_host_errors
        - meta: end_host
    - debug:
        msg: "[OK] Connnected {{ inventory_hostname }}"
    - set_fact:
        reachable: true

    - add_host:
        name: '{{ item }}'
        groups: 'reachable'
      loop: "{{ hostvars|dict2items|json_query('[?value.reachable].key') }}"
      run_once: true
    - add_host:
        name: '{{ item }}'
        groups: 'unreachable'
      loop: "{{ hostvars.keys()|list|difference(groups.reachable) }}"
      run_once: true

- hosts: "{{ groups.reachable.0 }}"
  gather_facts: false
  tasks:
    - debug:
        msg: "{{ inventory_hostname }}"

- hosts: reachable
  gather_facts: false
  tasks:
    - debug:
        msg: "{{ inventory_hostname }}"

- hosts: unreachable
  gather_facts: false
  tasks:
    - debug:
        msg: "{{ inventory_hostname }}"

# Skip other hosts if first host is reachable in Ansible
# https://stackoverflow.com/questions/60484583/skip-other-hosts-if-first-host-is-reachable-in-ansible/

# Q: "If 192.168.0.1 is reachable then it should skip rest of the IPs."
# 
# A: Let's wait_for_connection on all hosts in the block and store the
#    connection status in the variable reachable. Then use the variable
#    reachable to create the group of reachable hosts reachable. Then
#    run new play with the first host in the group
#    groups.reachable.0. For example
# --
      
#- name: Unreachable hosts
#  gather_facts: false
#  hosts: localhost
#  tasks:
#    - debug:
#        var: item
#      loop: "{{ groups.unreachable|default([]) }}"

# PLAY [Manage reachable hosts]
#     
# ok: [test_03] => {
#     "inventory_hostname": "test_03"
# }
# 
# PLAY [Manage unreachable hosts]
# 
# ok: [localhost] => (item=test_01) => {
#     "ansible_loop_var": "item", 
#     "item": "test_01"
# }
# ok: [localhost] => (item=test_02) => {
#     "ansible_loop_var": "item", 
#     "item": "test_02"
# }
    
# Cc: ansible-project@googlegroups.com
# Subject: Re: [ansible-project] Ansible react on unreachable / failed hosts
# Date: Mon, 11 Nov 2019 14:09:38 +0100
# 
# It's possible to test the connection, register and use the result. For example
# 
#     - delegate_to: localhost
#       command: ping -c1 "{{ inventory_hostname }}"
#       register: result
#       ignore_errors: true
# 
# Your solution is cleaner. I'd propose to create a group of reachable
# hosts and structure the the playbook into more plays. For example
# 
# [...]
# 
# Notes:
# 
# 1) "gather_facts: true" in the first play is necessary to
#    remove unreachable hosts from "ansible_play_hosts".
# 
# 2) It's not necessary to delegate "add_hosts".
# 
# 3) It's necessary "delegate_facts: true" to declare the variable
#    "unreachable_hosts" in the "hostvars['localhost']".
# --
