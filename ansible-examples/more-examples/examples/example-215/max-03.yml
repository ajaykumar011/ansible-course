- hosts: localhost
  gather_facts: false

  tasks:

    - find:
        recurse: true
        path: /scratch/tmp/some
      register: result

    - set_fact:
        my_files: "{{ result.files|json_query('[].path') }}"
    - debug:
        var: my_files

    - set_fact:
        my_dict: "{{ my_dict
                    |default([]) + [
                     dict(['path', 'archive', 'version']
                          |zip([item,
                                (item|basename).split('-')[0],
                                (item|basename).split('-')[1]|splitext|list|first])) ] }}"
      loop: "{{ my_files }}"
    - debug:
        var: my_dict

    - set_fact:
        my_groups: "{{ my_dict|groupby('archive') }}"
    - debug:
        var: my_groups

    - debug:
        msg: "Latest version of {{ item.0 }} is {{ item.1|json_query(query)|first }}"
      vars:
        query: "[?version == '{{ latest_version }}'].path"
        latest_version: "{{ item.1|json_query('[].version')|version_max }}"
      loop: "{{ my_groups }}"

# How to filter the latest version of every file in a tree using Ansible?
# https://stackoverflow.com/questions/59691073/how-to-filter-the-latest-version-of-every-file-in-a-tree-using-ansible/

# Problem with filter max
# 
# Credit @mdaniel: "max suffers from the long-standing problem of trying
# to use a lexicographical sort for version numbers, as it claims that
# of the choices 1.2 and 1.10, that 1.2 is the 'latest'"
# 
# It's possible to create a custom filter plugin with the filter and use
# it to select the latest version. For example
# 
# $ cat filter_plugins/version_filters.py
# 
# from distutils.version import LooseVersion
# 
# def version_max(l):
#     return sorted(l, key=LooseVersion)[-1]
# 
# class FilterModule(object):
# 
#     def filters(self):
#         return {
#             'version_max' : version_max
#             }
#
# latest_version: "{{ item.1|json_query('[].version')|version_max }}"
