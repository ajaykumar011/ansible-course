- hosts: localhost
  gather_facts: false
  vars:
    uid_from: 1000
    uid_to: 6500
  tasks:
    - getent:
        database: passwd
    - set_fact:
        my_list0: "{{ getent_passwd|
                      dict2items|
                      json_query('[].{user: key, uid: to_number(value[1])}') }}"
    - set_fact:
        my_list: "{{ my_list0|
                     json_query('[?uid >= `1000`]')|
                     json_query('[?uid <= `1100`]')|
                     sort(attribute='uid')|
                     list }}"
    - debug:
        var: my_list

    - set_fact:
        my_list2: "{{ my_list0|
                      selectattr('uid', 'ge', 1000)|
                      selectattr('uid', 'le', 1100)|
                      sort(attribute='uid')|
                      list }}"
    - debug:
        var: my_list2

    - template:
        src: uid.csv.j2
        dest: uid.csv

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# From: Vladimir Botka <vbotka@gmail.com>
# To: 
# Cc: ansible-project@googlegroups.com
# Subject: Re: [ansible-project] Adding task output to a file in a loop
# Date: Thu, 7 May 2020 17:04:21 +0200
# 
# > for uid in {1000..6500}
# >   user = ipa user-find --uid=$uid --raw |grep uid: | awk '{print $2}'
# >   echo "user,uid" >> uid.csv
# > do  
# 
# This is the Ansible equivalent, I think.
# 
# The module "getent" creates the dictionary "getent_passwd". Next
# "set_fact" creates the list of dictionaries with attributes "user" and
# "uid" only. Next "set_fact" selects required "uid" and module
# "template" writes the file.
# 
#   - getent:
#       database: passwd
#   - set_fact:
#       my_list: "{{ getent_passwd|
#                    dict2items|
#                    json_query('[].{user: key, uid: to_number(value[1])}')
#                    }}"
#   - set_fact:
#       my_list: "{{ my_list|
#                    json_query('[?uid >= `1000`]')|
#                    json_query('[?uid <= `65000`]')|
#                    sort(attribute='uid')|
#                    list }}"
#   - template:
#       src: uid.csv.j2
#       dest: uid.csv
# 
# This is the template
# 
#   shell> cat uid.csv.j2  
#   {% for item in my_list %}
#   {{ item.user }},{{ item.uid }}
#   {% endfor %}
# 
# Notes
# 
#   * The function "to_number" is needed to store uid as numbers
#     https://jmespath.readthedocs.io/en/latest/proposals/functions.html#to-number
# 
#   * The file "uid.csv" will be created on the remote host.
# 
#   * To create the file on the controller use "delegate_to" and mark the file
#     by the remote hostname. For example
# 
#   - template:
#       src: uid.csv.j2
#       dest: "{{ inventory_hostname }}-uid.csv"
#     delegate_to: localhost
# 
#     ,or use module "fetch". See parameter "flat"
#     https://docs.ansible.com/ansible/latest/modules/fetch_module.html#parameter-flat
# --
